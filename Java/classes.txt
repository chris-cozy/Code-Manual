CLASSES IN JAVA
    Fundamental component is an object
            - A running program is a collection of objects
        An object encapsulates
            - Data
            - How the data changes
        Each object is an instance of a class
        Class declaration is blueprint for objects
        Class is a component type
            - Stack, String, Person
        Object is an instance of that component
            - Pencil mathTool = new Pencil();

        Good things to do
            - Only declare one class per file
            - Give file name the same name as the class declaration it contains
                ○ Class HelloWorldApp declaration appears in HelloWorldApp.java
        Two members in class declaration
            - Fields (data)
                ○ int length; 
            - Methods (procedures)

    Object creation and deletion
        Explicit object creation with new();
            - Java.util.Date d = new java.util.Date();
            - Integer count = new Integer(34);
        Unlike in C/C++, memory is not explicitly freed
            - References just go out of scope (become null)
        Automatic garbage collection eventually deletes unreachable objects
            - There is a call for garbage collection but it doesn't always guarantee that garbage collection happens (it's not very helpful)

        Java has a high memory overhead, so it's not used in many places where running out of memory is a concern

    Initialization of an object's fields
        Implicit: default values based on type
        Explicit: initialization with field declaration
        Special method: "constructor"
            - Syntax: name is same as class, no return type
            - Invoked by new(), so can have parameters
            - Runs after implicit/explicit field initialization

        Default initial values are for fields only, and do not apply to local variables

    Visibility
        Members can be private or public
        Private members
            - Can only be accessed by instances of the same class
            - Provide concrete implementation/representation
        Public members
            - Can be accessed by any object
            - Provide abstract view (client-side)

    Good things to do
        Group member declaration by visibility status
            - Java convention: private at the top
        No data fields should be public
            - Bad practice: Public "accessor" methods for getting and setting private fields (aka getters/setters)
            - Better practice: Provide public members for observing and controlling abstract values of objects

    Method Invocation
        Syntax: objectreference.member
        Reference is implicit inside same object
        Explicit reference to same object available as this keyword (from within the object itself)

    Method Overloading
        A class can have more than one method with the same name as long as they have different parameter lists
            - How does the compiler know which method is being invoked?
                ○ Based off the parameters being passed in
            - Differing only in return type is not allowed

    Multiple Constructors
        Default constructor: no arguments
            - Fields initialized explicitly or implicitly
            - Provided automatically only if no constructor defined explicitly
        Another constructor: one same-class argument
            - Often called a copy constructor
            - Ex: Pencil (Pencil p) {…}
        One constructor can call another with this()
            - If another constructor called, must be the first statement
        Not seen very often

THE OBJECT CLASS
    Every class in Java inherits from the special built in Object class
        - Provides default implementations for instance methods
            ○ Boolean  equals (Object obj)
            ○ String toString()
            ○ Etc.
        - Every class by default has these methods since they inherit
    The class Object has no data fields though, the methods don't do anything except ensure that every class has the same name for these important methods
        - Instead of:
        - A.equals()
        - B.isEqual()
        - C.checkEqual()

    equals
        boolean equals(Object obj)
            - Reports whether "this" equal to obj
            - Ensures
                ○ equals = (this == obj)
            - So the default implementation checks reference (memory) equality, which may not be what I want it to do
            - Need to override

    toString
        String toString()
            - Returns the string representation of "this"
            - Ensures:
                ○ toString = [the string representation of this]
            - So the default implementation returns a string of the reference value (memory location) of "this", which may not be what I want it to do
            - Need to override

    To override, before the body of the method, type @Override
        - Example:
    @Override
    public String toString() {
    …
    }

    Always override the equals and toString operators, even if not being used
    There is an issue when overriding the equals method

    instanceOf
        A special operator in Java
        Syntax: <object> instanceOf <Class>
        Returns true if the object is of type class
            - False otherwise
        Used when overriding the equals method
            - Can be used in an if statement
            - If (!(obj instanceOf Pencil))
                ○ return False

    Casting
        Now it is know that obj is the right type, but there will be a syntax error if methods are called
        obj needs to be casted, the same way primitive types are
        Casting is us promising that it will work, so instanceOf needs to be used to confirm the type first

    Overriding VS Overloading
        These are different
        Overloading - when two or more methods have the same name and differ in the number and/or types of their formal parameters
